df$motif.Sap1[i] <- m.motif(object, motif = "GAAGAGC", max = 0, min = 0)
df$motif.Sap12[i] <- m.motif(object, motif = "GCTCTTC", max = 0, min = 0)
#Xbal - TCTAGA
df$motif.Xbal[i] <- m.motif(object, motif = "TCTAGA", max = 0, min = 0)
#AarI (CACCTGC and GCAGGTG, exact match)
df$motif.aarl1[i] <- m.motif(object, motif = "CACCTGC", max = 0, min = 0)
df$motif.aarl2[i] <- m.motif(object, motif = "GCAGGTG", max = 0, min = 0)
#Analyzing CAI
mrna.parse <- str_split(tolower(df$mrna[i]), "")[[1]]
df$CAI[i] <- cai(mrna.parse, w, numcode = 1, zero.threshold = 0.0001, zero.to = 0.01)
#Analyzing CFD
df$CFD[i] <- assign.CFD(seq = df$mrna[i], table = df.human)
rm(object) #remove object for aesthetic purposes #put this OUTSIDE
}
#Filtering the transcripts (analytics)
df <- df[df$GC.max < 0.70 &
df$GC.min > 0.30 &
df$motif.ATCTGTT == 0 &
df$motif.TTTTTT == 0 &
df$motif.HINDI == 0 &
df$motif.Sap1 == 0 &
df$motif.Sap12 == 0 &
df$motif.Xbal == 0 &
df$motif.aarl1 == 0 &
df$motif.aarl2 == 0 &
df$CAI >= CAI,] #Filter out the "bad" transcripts
df<- unique(df) #grab only UNIQUE transcripts!
df <- df[order(-df$CAI),]
df <- find.nCIS(df, df.nCIS) #analyze inputed df for negative CIS elements
df$nRE <- 0 #analyze df for negative Repeat elements
for(i in 1:nrow(df)){
object <- DNAString(df$mrna[i]) #DNAString object to be used for motif analysis
df$nRE[i] <- count.NRE(sequence = df$mrna[i])
rm(object)
}
return(df)
} #inputs aa string, n desired number of seq, freq table. Outputs df (n, mRNA, GC, CAI, CFD, nCIS, nRE)
codonoptimize <- function(seq, p, n, CAI, codons, nCIS){
start.time <- Sys.time() #Start the time
seq <- as.character(seq)
p <- as.integer(p)
CAI <- as.numeric(CAI)
n <- as.integer(n)
df.human <- as.character(codons)
df.nCIS <- as.character(nCIS)
print("Codon Optimizing Windows...")
df.prot <- split.AA(seq=seq, n = p)
df.master <- NULL
for(i in 1:nrow(df.prot)){
df <- CO.filter(seq = df.prot$window[i],
n=n,
CAI=CAI,
codons=df.human,
nCIS=df.nCIS
)
#if df.master is empty, it becomes the first df
if(isEmpty(df.master[1]) == TRUE){
df.master <- df[,c("n", "mrna")]
#Write code there that will clean up the df
colnames(df.master) <- c("n", "mrna")
}
else{
# if not, append subsequent dataframes
df <- df[,c("n", "mrna")]
df.master <- merge(df.master, df, by = "n", all.y = TRUE, all.x = TRUE)
colnames(df.master) <- c("n", sprintf("window%02d", seq(1,ncol(df.master)-1)))
}
print(paste("Window", as.character(i), "finished!", sep = " "))
}
print("All windows have finished!")
time <- as.character(round(Sys.time()-start.time, 2))
print(paste("Time elapsed:", time, sep = " " ))
df.human <- read.xlsx(df.human, colNames = TRUE) #Load in AA chart
w <- df.human[order(df.human$Codon),] #Preparing vector of RelativeAdaptiveness to calculate CAI
rownames(w) <- tolower(w$Codon)
w <- w$RelativeAdaptiveness
df.nCIS <- read.fasta.DNA(df.nCIS) #Load in nCIS elements
rm(df)
rm(df.prot)
df.master <- df.master[complete.cases(df.master), ] #Remove dataframes with na values
#Create random dataframe with n rows
df.apprentice <- as.data.frame(matrix(0, ncol = ncol(df.master)-1, nrow = 300))
#Populate dataframe with integers in df.master (biased towards higher half)
for(i in 1:ncol(df.apprentice)){
df.apprentice[,i] <- sample(x = floor(nrow(df.master)/2), size = 50, replace = TRUE)
}
#Double for-loop to use coordinates from df.app to grab seq-windows from df.master
for(i in 1:nrow(df.apprentice)){
for(j in 1:ncol(df.apprentice)){
n <- df.apprentice[i,j] #the number at the incremental coordinates
df.apprentice[i,j] <- df.master[,-1][n, j]
}
}
#Combine df.apprentice & df.master
colnames(df.apprentice) <- c(sprintf("window%02d", seq(1,ncol(df.master)-1)))
df.master <- rbind(df.master[,-1] , df.apprentice)
rm(df.apprentice)
df.master$mrna <- 0
for(i in 1:nrow(df.master)){
seq <- paste(df.master[i,1:ncol(df.master)-1], collapse = "")
df.master$mrna[i] <- seq
}
#Final df of CO sequences (Final analytics need to be performed)
df.master <- data.frame(n = 1:nrow(df.master), mrna = df.master$mrna)
df.master <- data.frame(n = 1:length(unique(df.master$mrna)), mrna = unique(df.master$mrna)) #only unique candidates
df <- df.master; rm(df.master)
df$mrna <- as.character(df$mrna)
print("Table of Codon Optimized mRNA made!")
print("Performing mRNA analytics...")
df <- df %>% mutate(GC = GC.calc(mrna)) #calculate transcript GC
#Establishing analytical variables
df[,c("CAI", "CFD", "GC.max", "GC.min", "motif.ATCTGTT", "motif.TTTTTT", "motif.HINDI", "motif.Sap1", "motif.Sap12", "motif.Xbal", "motif.aarl1", "motif.aarl2")] <- 0
#Calculating transcript analytics
for(i in 1:nrow(df)){
#Calculating GC max/min in windows
GC.max <- GC.minmax(string = df$mrna[i], size = 30, minmax = "MAX")
df$GC.max[i] <- GC.max
GC.min <- GC.minmax(string = df$mrna[i], size = 30, minmax = "MIN")
df$GC.min[i] <- GC.min
####### In-house Motif analysis
object <- DNAString(df$mrna[i]) #DNAString object to be used for motif analysis
#rrnB1 terminator
df$motif.ATCTGTT[i] <- m.motif(object, motif = "ATCTGTT", max = 1, min = 0)
#Stretch of T's
df$motif.TTTTTT[i] <- m.motif(object, motif = "TTTTTT", max = 0, min = 0)
#HindIII - AAGCTT
df$motif.HINDI[i] <- m.motif(object, motif = "AAGCTT", max = 0, min = 0)
#Sap1 - GAAGAGC
df$motif.Sap1[i] <- m.motif(object, motif = "GAAGAGC", max = 0, min = 0)
df$motif.Sap12[i] <- m.motif(object, motif = "GCTCTTC", max = 0, min = 0)
#Xbal - TCTAGA
df$motif.Xbal[i] <- m.motif(object, motif = "TCTAGA", max = 0, min = 0)
#AarI (CACCTGC and GCAGGTG, exact match)
df$motif.aarl1[i] <- m.motif(object, motif = "CACCTGC", max = 0, min = 0)
df$motif.aarl2[i] <- m.motif(object, motif = "GCAGGTG", max = 0, min = 0)
#Analyzing CAI
mrna.parse <- str_split(tolower(df$mrna[i]), "")[[1]]
df$CAI[i] <- cai(mrna.parse , w, numcode = 1, zero.threshold = 0.0001, zero.to = 0.01)
#Analyzing CFD
df$CFD[i] <- assign.CFD(seq = df$mrna[i], table = df.human)
rm(object) #remove object for aesthetic purposes #put this OUTSIDE
}
#Filtering the transcripts (analytics)
df <- df[
df$GC.max < 0.70 &
df$GC.min > 0.30 &
df$motif.ATCTGTT == 0 &
df$motif.TTTTTT == 0 &
df$motif.HINDI == 0 &
df$motif.Sap1 == 0 &
df$motif.Sap12 == 0 &
df$motif.Xbal == 0 &
df$motif.aarl1 == 0 &
df$motif.aarl2 == 0 &
df$CAI >= 0.85,] #Filter out the "bad" transcripts
df<- unique(df) #grab only UNIQUE transcripts!
df <- df[order(-df$CAI),]
df <- find.nCIS(df, df.nCIS) #analyze inputed df for negative CIS elements
df$nRE <- 0 #analyze df for negative Repeat elements
for(i in 1:nrow(df)){
object <- DNAString(df$mrna[i]) #DNAString object to be used for motif analysis
df$nRE[i] <- count.NRE(sequence = df$mrna[i])
rm(object)
}
print("Transcript Analytics Finished!")
time <- as.character(round(Sys.time()-start.time, 2))
print(paste("Total Run-time:", time, sep = " " ))
rm(list = ls.str(mode = 'numeric')) #remove all numeric variables
rm(list = ls.str(mode = 'character')) #remove all character variables
return(df)
}
assign.rarity <- function(codon, df){
codon <- as.character(codon)
df.rare <- df
#Check parameter
if(codon %in% df.rare$Codon == TRUE){
return(df.rare[df.rare$Codon == codon, ][["Status"]])
}
} #Function assigns "rarity" of inputted codon based on freq table
assign.CFD <- function(seq, table){
seq <- as.character(seq)
#Parse the seq into codon variables
seq.df <- as.data.frame(strsplit(seq, '(?<=.{3})', perl=TRUE))
colnames(seq.df) <- "Codon"
seq.df$Codon <- as.character(seq.df$Codon)
#initialize rarity variable
seq.df$Status <- 0
for(i in 1:nrow(seq.df)){
#Assign rarity status to each variable
seq.df$Status[i] <- assign.rarity(seq.df$Codon[i], table)
}
seq.df$Status <- gsub("rare", "R", seq.df$Status)
seq.df$Status <- gsub("common", "c", seq.df$Status)
#seq to be analyzed for CFD
seq.rare <- paste(seq.df$Status, collapse = "")
#calculate CFD (#Rare codon duplets / AA string)
CFD.RR <- nrow(as.data.frame(matchPattern("RR", DNAString(seq.rare), max.mismatch = 0, min.mismatch = 0)))
CFD.RcR <- nrow(as.data.frame(matchPattern("RcR", DNAString(seq.rare), max.mismatch = 0, min.mismatch = 0)))
CFD <- (CFD.RR + CFD.RcR) / (nchar(seq)/3)
return(round(CFD, 3))
} #Calculates CFD from inputed mRNA based on freq table
m.motif <- function(seq, motif, max, min){
seq <- seq
motif <- as.character(motif)
if(mode(seq) != "S4"){
#If it is not a DNAString obj --> make it one
seq <- Biostrings::DNAString(seq)
}
#Find motif and return #
df <- as.data.frame(matchPattern(motif, seq, max.mismatch = max, min.mismatch = min))
return(nrow(df))
} #Function for motif (object/string, motif, max, min)
find.nCIS <- function(df, df2){
df.nCIS <- df2
#Grab only the CO sequences & relevant analytics (GC, CAI, CFD)
df.temp <- data.frame(1:nrow(df), df[,c("mrna", "GC", "CAI", "CFD")]) #inputted df must have mrna, GC, CAI, CFD
colnames(df.temp)[1] <- "n"
#I think we're going to have code by analyzing each CIS motif against filtered transcripts
for(i in 1:nrow(df.nCIS)){
motif <- df.nCIS$sequence[i]
motif <- as.data.frame(grepl(motif, df$mrna))
df.temp <- cbind(df.temp, motif)
}
df.temp2 <- df.temp[,6:ncol(df.temp)] #df of only TRUE/FALSE CIS motifs
df.temp <- df.temp[,1:5]#df of only mRNA + other analytics
# colnames(df.temp2) <- sprintf("M%02d", seq(1,ncol(df.temp2))) #we might not need this line
df.temp2 <- data.frame(apply(df.temp2, 1, function(x) length(which(x== TRUE)))) #This works
colnames(df.temp2) <- "nCIS"
df.temp <- data.frame(df.temp, df.temp2) #a success!!!!!
return(df.temp)
} #analyze inputed df for negative CIS elements
#Functions to find NegRepeatElements
findTandemRepeats0 <- function(subject, period.multiple=2, include.period1=FALSE, min.length=24) {
if (!isSingleNumber(period.multiple))
stop("'period.multiple' must be a single integer")
if (!is.integer(period.multiple))
period.multiple <- as.integer(period.multiple)
if (period.multiple < 2L)
stop("'period.multiple' must be >= 2")
if (!isTRUEorFALSE(include.period1))
stop("'include.period1' must be TRUE or FALSE")
if (!isSingleNumber(min.length))
stop("'min.length' must be a single integer")
if (!is.integer(min.length))
min.length <- as.integer(min.length)
if (min.length < 12L)
stop("'min.length' must be >= 12")
s1 <- subseq(subject, start=1L+period.multiple)
s2 <- subseq(subject, end=-1L-period.multiple)
ir <- as(as.raw(s1) == as.raw(s2), "NormalIRanges")
ir <- ir[width(ir) >= period.multiple]
end(ir) <- end(ir) + period.multiple
ir <- ir[width(ir) >= min.length]
repeats <- Views(subject, ir)
af <- alphabetFrequency(repeats, baseOnly=TRUE)
ok <- af[ , "other"] == 0L  # has no IUPAC ambiguities
if (!include.period1)
ok <- ok & rowSums(af[ , DNA_BASES] != 0L) >= 2L
repeats[which(ok)]
}
findTandemRepeats <- function(subject, include.period1=FALSE) {
trs_list <- lapply(7:12,
function(period.multiple)
ranges(findTandemRepeats0(subject,
period.multiple,
include.period1))
)
trs <- sort(unique(do.call("c", trs_list)))
Views(subject, trs)
} ## Find all *exact* tandem repeats of period <= 24.
count.NRE <- function(sequence){
#Limit: minimum input sequence 10, NRE must be 24 nt minimum
sequence <- sequence
if(mode(sequence) != "S4"){
#If it is not a DNAString obj --> make it one
sequence <- Biostrings::DNAString(sequence)
}
n <- lengths(as.vector(as.data.frame(findTandemRepeats(sequence, include.period1=TRUE))))
return(n)
} #input sequence + return NRE count (if any);
find.NRE <- function(sequence){
sequence <- sequence
if(mode(sequence) != "S4"){
#If it is not a DNAString obj --> make it one
sequence <- Biostrings::DNAString(sequence)
}
n <- findTandemRepeats(sequence, include.period1=TRUE)
return(n)
} #Input sequence + return NRE (if any)
translate.seq <- function(seq){
seq <- as.character(Biostrings::translate(DNAString(as.character(seq))))
return(seq)
} #translate DNA sequence
codonoptimize <- function(seq, p, n, CAI, codons, nCIS){
start.time <- Sys.time() #Start the time
seq <- as.character(seq)
p <- as.integer(p)
CAI <- as.numeric(CAI)
n <- as.integer(n)
df.human <- as.character(codons)
df.nCIS <- as.character(nCIS)
print("Codon Optimizing Windows...")
df.prot <- split.AA(seq=seq, n = p)
df.master <- NULL
for(i in 1:nrow(df.prot)){
df <- CO.filter(seq = df.prot$window[i],
n=n,
CAI=CAI,
codons=df.human,
nCIS=df.nCIS
)
#if df.master is empty, it becomes the first df
if(isEmpty(df.master[1]) == TRUE){
df.master <- df[,c("n", "mrna")]
#Write code there that will clean up the df
colnames(df.master) <- c("n", "mrna")
}
else{
# if not, append subsequent dataframes
df <- df[,c("n", "mrna")]
df.master <- merge(df.master, df, by = "n", all.y = TRUE, all.x = TRUE)
colnames(df.master) <- c("n", sprintf("window%02d", seq(1,ncol(df.master)-1)))
}
print(paste("Window", as.character(i), "finished!", sep = " "))
}
print("All windows have finished!")
time <- as.character(round(Sys.time()-start.time, 2))
print(paste("Time elapsed:", time, sep = " " ))
df.human <- read.xlsx(df.human, colNames = TRUE) #Load in AA chart
w <- df.human[order(df.human$Codon),] #Preparing vector of RelativeAdaptiveness to calculate CAI
rownames(w) <- tolower(w$Codon)
w <- w$RelativeAdaptiveness
df.nCIS <- read.fasta.DNA(df.nCIS) #Load in nCIS elements
rm(df)
rm(df.prot)
df.master <- df.master[complete.cases(df.master), ] #Remove dataframes with na values
#Create random dataframe with n rows
df.apprentice <- as.data.frame(matrix(0, ncol = ncol(df.master)-1, nrow = 300))
#Populate dataframe with integers in df.master (biased towards higher half)
for(i in 1:ncol(df.apprentice)){
df.apprentice[,i] <- sample(x = floor(nrow(df.master)/2), size = 50, replace = TRUE)
}
#Double for-loop to use coordinates from df.app to grab seq-windows from df.master
for(i in 1:nrow(df.apprentice)){
for(j in 1:ncol(df.apprentice)){
n <- df.apprentice[i,j] #the number at the incremental coordinates
df.apprentice[i,j] <- df.master[,-1][n, j]
}
}
#Combine df.apprentice & df.master
colnames(df.apprentice) <- c(sprintf("window%02d", seq(1,ncol(df.master)-1)))
df.master <- rbind(df.master[,-1] , df.apprentice)
rm(df.apprentice)
df.master$mrna <- 0
for(i in 1:nrow(df.master)){
seq <- paste(df.master[i,1:ncol(df.master)-1], collapse = "")
df.master$mrna[i] <- seq
}
#Final df of CO sequences (Final analytics need to be performed)
df.master <- data.frame(n = 1:nrow(df.master), mrna = df.master$mrna)
df.master <- data.frame(n = 1:length(unique(df.master$mrna)), mrna = unique(df.master$mrna)) #only unique candidates
df <- df.master; rm(df.master)
df$mrna <- as.character(df$mrna)
print("Table of Codon Optimized mRNA made!")
print("Performing mRNA analytics...")
df <- df %>% mutate(GC = GC.calc(mrna)) #calculate transcript GC
#Establishing analytical variables
df[,c("CAI", "CFD", "GC.max", "GC.min", "motif.ATCTGTT", "motif.TTTTTT", "motif.HINDI", "motif.Sap1", "motif.Sap12", "motif.Xbal", "motif.aarl1", "motif.aarl2")] <- 0
#Calculating transcript analytics
for(i in 1:nrow(df)){
#Calculating GC max/min in windows
GC.max <- GC.minmax(string = df$mrna[i], size = 30, minmax = "MAX")
df$GC.max[i] <- GC.max
GC.min <- GC.minmax(string = df$mrna[i], size = 30, minmax = "MIN")
df$GC.min[i] <- GC.min
####### In-house Motif analysis
object <- DNAString(df$mrna[i]) #DNAString object to be used for motif analysis
#rrnB1 terminator
df$motif.ATCTGTT[i] <- m.motif(object, motif = "ATCTGTT", max = 1, min = 0)
#Stretch of T's
df$motif.TTTTTT[i] <- m.motif(object, motif = "TTTTTT", max = 0, min = 0)
#HindIII - AAGCTT
df$motif.HINDI[i] <- m.motif(object, motif = "AAGCTT", max = 0, min = 0)
#Sap1 - GAAGAGC
df$motif.Sap1[i] <- m.motif(object, motif = "GAAGAGC", max = 0, min = 0)
df$motif.Sap12[i] <- m.motif(object, motif = "GCTCTTC", max = 0, min = 0)
#Xbal - TCTAGA
df$motif.Xbal[i] <- m.motif(object, motif = "TCTAGA", max = 0, min = 0)
#AarI (CACCTGC and GCAGGTG, exact match)
df$motif.aarl1[i] <- m.motif(object, motif = "CACCTGC", max = 0, min = 0)
df$motif.aarl2[i] <- m.motif(object, motif = "GCAGGTG", max = 0, min = 0)
#Analyzing CAI
mrna.parse <- str_split(tolower(df$mrna[i]), "")[[1]]
df$CAI[i] <- cai(mrna.parse , w, numcode = 1, zero.threshold = 0.0001, zero.to = 0.01)
#Analyzing CFD
df$CFD[i] <- assign.CFD(seq = df$mrna[i], table = df.human)
rm(object) #remove object for aesthetic purposes #put this OUTSIDE
}
#Filtering the transcripts (analytics)
df <- df[
df$GC.max < 0.70 &
df$GC.min > 0.30 &
df$motif.ATCTGTT == 0 &
df$motif.TTTTTT == 0 &
df$motif.HINDI == 0 &
df$motif.Sap1 == 0 &
df$motif.Sap12 == 0 &
df$motif.Xbal == 0 &
df$motif.aarl1 == 0 &
df$motif.aarl2 == 0 &
df$CAI >= 0.85,] #Filter out the "bad" transcripts
df<- unique(df) #grab only UNIQUE transcripts!
df <- df[order(-df$CAI),]
df <- find.nCIS(df, df.nCIS) #analyze inputed df for negative CIS elements
df$nRE <- 0 #analyze df for negative Repeat elements
for(i in 1:nrow(df)){
object <- DNAString(df$mrna[i]) #DNAString object to be used for motif analysis
df$nRE[i] <- count.NRE(sequence = df$mrna[i])
rm(object)
}
print("Transcript Analytics Finished!")
time <- as.character(round(Sys.time()-start.time, 2))
print(paste("Total Run-time:", time, sep = " " ))
rm(list = ls.str(mode = 'numeric')) #remove all numeric variables
rm(list = ls.str(mode = 'character')) #remove all character variables
return(df)
}
prot<- "MATGSRTSLLLAFGLLCLPWLQEGSAFPTIPLSQSALTQPASVSGSPGQSITISCTGTSSDVGGYNYVSWYQQHPGKAPKLMIYDVSKRPSGVSNRFSGSKSGNTASLTISGLQSEDEADYYCNSLTSISTWVFGGGTKLTVLGQPKAAPSVTLFPPSSEELQANKATLVCLISDFYPGAVTVAWKADSSPVKAGVETTTPSKQSNNKYAASSYLSLTPEQWKSHRSYSCQVTHEGSTVEKTVAPTECS*"
df <- codonoptimize(seq = prot,
p = 3,
n = 1000,
CAI = 0.7,
codons = "AminoAcidTable_Human_optimized_V2.xlsx",
nCIS = "negativeCIS/negativeCISelements.fasta"
)
View(df)
View(df)
library(shiny); runApp('SHINY.R')
runApp('SHINY.R')
runApp('~/Desktop/BINF/github/CO/Sanofi/test.R')
runApp('SHINY.R')
runApp('test.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('~/Desktop/BINF/github/CO/Sanofi/SHINY.R')
runApp('SHINY.R')
runApp('~/Desktop/BINF/github/CO/Sanofi/SHINY.R')
runApp('SHINY.R')
runApp('~/Desktop/BINF/github/CO/Sanofi/SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
runApp('SHINY.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='khanganhtran',
token='F9988BD1FB6E783108872A9024658E09',
secret='<SECRET>')
rsconnect::setAccountInfo(name = 'khanganhtran',
token = 'F9988BD1FB6E783108872A9024658E09',
secret = '<SECRET>')
require(rsconnect)
rsconnect::setAccountInfo(name = 'khanganhtran',
token = 'F9988BD1FB6E783108872A9024658E09',
secret = '<SECRET>')
rsconnect::setAccountInfo(name='khanganhtran',
token='F9988BD1FB6E783108872A9024658E09',
secret='<SECRET>')
rsconnect::setAccountInfo(name='khanganhtran',
token='F9988BD1FB6E783108872A9024658E09',
secret='ypLH8a5keqZsgkTEKqpfL7wkKF0A+DxcdrnTMwCV')
